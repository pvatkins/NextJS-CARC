require ('dotenv').config(); // Load environment variables from .env file
const express = require('express'); // Import the express module
const mysql = require('mysql2/promise'); // Using mysql2 for promise-based operations
const cors = require('cors'); // Import the cors module for handling CORS  
const app = express(); // Create an instance of express
const port = process.env.PORT || 5000; // Set the port to listen on, defaulting to 5000

// Middleware
app.use(cors()); // Enable CORS for all routes (adjust for production if needed)
app.use(express.json()); // To parse JSON request bodies

// Database configuration (replace with your actual credentials)
// Note: Ensure these environment variables are set in your .env file
// Note: The definitions here may be redundant if already set in the .env file
//       but they are included here for clarity and to ensure the code runs independently.
const dbConfig = {
    host:     process.env.MY_SQL_HOST,
    user:     process.env.MY_SQL_USER,
    password: process.env.MY_SQL_PASSWORD,
    database: process.env.MY_SQL_DATABASE
};

// ===============================================
// API Route 1: Get FullName
// This replaces the logic from serv_getFullName_n6sjf.php
// ===============================================
app.post('/api/getFullName', async (req, res) => {
    const { callsign } = req.body;

    if (!callsign) {
        return res.status(400).json({ error: 'Callsign is required' });
    }

    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute(
            'SELECT FullName FROM merged WHERE callsign = ? LIMIT 1',
            [callsign]
        );
        connection.end(); // Close connection after query

        if (rows.length > 0) {
            res.status(200).json({ result: { FullName: rows[0].FullName } });
        } else {
            res.status(200).json({ result: null }); // No full name found
        }
    } catch (error) {
        console.error('Database error in /api/getFullName:', error);
        res.status(500).json({ error: 'Failed to retrieve FullName' });
    }
});

// ===============================================
// API Route 2: Submit Dues Data
// This replaces the logic from AppFormDB_Receptor.php
// ===============================================
app.post('/api/submitDues', async (req, res) => {
    const formData = req.body;

    // Basic validation (add more as needed)
    if (!formData || !formData.callsign || !formData.total) {
        return res.status(400).json({ error: 'Missing required form data' });
    }

    // Generate a unique PayPal ID (you might have a more robust method like a UUID)
    const new_pp_id = `PP_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
    formData.pp_id = new_pp_id; // Add to formData for insertion

    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);

        // Prepare the SQL INSERT statement
        // Ensure your 'pp_tnx' table schema matches these fields
        const insertSql = `
            INSERT INTO pp_tnx (
                years, newmember, callsigns, ncallsigns, callsign, fullname,
                primary_dues, family_dues, repeater_donation, digipeater_donation,
                subtotal, pay_paypal, paypal_fee, club_receives, total_charges,
                pp_total_for_paypal, transaction_date, transaction_status, pp_id
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;

        const insertValues = [
            formData.years,
            formData.newmember,
            formData.callsigns,
            formData.ncallsigns,
            formData.callsign,
            formData.fullname || 'N/A', // Use 'N/A' or handle cases where fullname might not be set from lookup
            formData.primary,
            formData.family,
            formData.repeater,
            formData.digipeater,
            formData.subtotal,
            formData.pay_paypal,
            formData.paypalfee,
            formData.clubreceives,
            formData.total,
            formData.pp_total,
            formData.date,
            formData.transaction_status,
            formData.pp_id
        ];

        await connection.execute(insertSql, insertValues);
        connection.end(); // Close connection

        res.status(200).json({ message: 'Data inserted successfully', new_pp_id });

    } catch (error) {
        console.error('Database error in /api/submitDues:', error);
        res.status(500).json({ error: 'Failed to insert data' });
    }
});


// --- NEW API ROUTE: Check Repeater Report Existence ---
app.get('/api/repeater-report-exists', async (req, res) => {
    const { year, month } = req.query; // Expect year and month as query parameters
    if (!year || !month) {
        return res.status(400).json({ error: 'Year and month query parameters are required.' });
    }

    const reportUrl = `https://audio.stickerburr.net/files/${month}_${year}/index.html`;

    try {
        const response = await fetch(reportUrl, { method: 'HEAD' }); // Use HEAD request for efficiency
        // HEAD request usually returns status code without downloading full content
        // Check if the status code indicates success (200-299 range)
        if (response.ok) { // response.ok is true for 2xx status codes
            res.status(200).json({ exists: true, url: reportUrl });
        } else if (response.status === 404) {
            res.status(200).json({ exists: false, url: reportUrl, message: 'File not found.' });
        } else {
            console.error(`Error checking report ${reportUrl}: Status ${response.status}`);
            res.status(500).json({ exists: false, url: reportUrl, message: `Server error: ${response.status}` });
        }
    } catch (error) {
        console.error(`Network or fetch error checking report ${reportUrl}: ${error.message}`);
        res.status(500).json({ exists: false, url: reportUrl, message: `Network error: ${error.message}` });
    }
});

{/*}
// Basic API Route
app.get('/api/hello', (req, res) => {
  res.json({ message: 'Hello from the Express Backend API!' });
});

// Another example API route
app.get('/api/data', (req, res) => {
    const data = [
        { id: 1, name: 'Item A', description: 'This is item A' },
        { id: 2, name: 'Item B', description: 'This is item B' },
        { id: 3, name: 'Item C', description: 'This is item C' },
    ];

  res.json(data);
});
*/}

// Start the server
app.listen(port, () => {
  console.log(`Backend server is listening on http://localhost:${port}`);
});